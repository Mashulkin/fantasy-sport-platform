import logging
from datetime import datetime
from celery.beat import ScheduleEntry, Scheduler
from celery.schedules import crontab
from app.core.database import SessionLocal
from app.models.parser import ParserConfig

logger = logging.getLogger(__name__)


class DatabaseScheduler(Scheduler):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ë–î
    –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ —Å –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    
    def __init__(self, *args, **kwargs):
        self.last_db_update = 0
        self.last_db_check = 0
        super().__init__(*args, **kwargs)
        
    def setup_schedule(self):
        """–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ Setting up DatabaseScheduler...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.merge_inplace(self.app.conf.beat_schedule)
        self.install_default_entries(self.app.conf.beat_schedule)
        
        # –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –∏–∑ –ë–î
        self.update_from_database()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ë–î
        self.max_interval = 30  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
    def validate_and_fix_cron(self, schedule_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        if not schedule_str:
            return None, "Empty schedule"
        
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º
            parts = schedule_str.strip().split()
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
            parts = [part for part in parts if part]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
            if len(parts) < 5:
                while len(parts) < 5:
                    parts.append('*')
            elif len(parts) > 5:
                parts = parts[:5]
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            clean_parts = []
            for part in parts:
                clean_part = part.replace('**', '*').replace('***', '*')
                clean_parts.append(clean_part)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ crontab
            test_cron = crontab(
                minute=clean_parts[0],
                hour=clean_parts[1],
                day_of_month=clean_parts[2],
                month_of_year=clean_parts[3],
                day_of_week=clean_parts[4]
            )
            
            fixed_schedule = ' '.join(clean_parts)
            return fixed_schedule, None
            
        except Exception as e:
            return None, f"Invalid cron expression: {e}"
    
    def update_from_database(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏–∑ –ë–î"""
        try:
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            parsers = db.query(ParserConfig).filter(
                ParserConfig.is_active == True,
                ParserConfig.schedule.isnot(None)
            ).all()
            
            logger.info(f"üìã Found {len(parsers)} active parsers in database")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
            current_parser_ids = set(parser.id for parser in parsers)
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã
            old_parser_schedules = [name for name in self.schedule.keys() if name.startswith('parser_')]
            removed_count = 0
            
            for schedule_name in old_parser_schedules:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (parser_1 -> 1)
                try:
                    parser_id = int(schedule_name.split('_')[1])
                    if parser_id not in current_parser_ids:
                        del self.schedule[schedule_name]
                        removed_count += 1
                        logger.info(f"üóëÔ∏è Removed schedule for inactive parser: {schedule_name}")
                except (IndexError, ValueError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å ID, —É–¥–∞–ª—è–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    del self.schedule[schedule_name]
                    removed_count += 1
                    logger.warning(f"üóëÔ∏è Removed malformed schedule: {schedule_name}")
            
            if removed_count > 0:
                logger.info(f"üßπ Removed {removed_count} inactive parser schedules")
            
            # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
            added_count = 0
            updated_count = 0
            error_count = 0
            
            for parser in parsers:
                if parser.schedule:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                    fixed_schedule, error = self.validate_and_fix_cron(parser.schedule)
                    
                    if error:
                        logger.error(f"‚ùå Parser {parser.name} has invalid schedule '{parser.schedule}': {error}")
                        error_count += 1
                        continue
                    
                    try:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        parts = fixed_schedule.split()
                        
                        schedule_name = f"parser_{parser.id}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        is_update = schedule_name in self.schedule
                        
                        # –°–æ–∑–¥–∞–µ–º ScheduleEntry
                        entry = ScheduleEntry(
                            name=schedule_name,
                            task='run_parser',
                            schedule=crontab(
                                minute=parts[0],
                                hour=parts[1],
                                day_of_month=parts[2],
                                month_of_year=parts[3],
                                day_of_week=parts[4]
                            ),
                            args=(parser.id,),
                            kwargs={},
                            options={'expires': 3600},
                            app=self.app
                        )
                        
                        self.schedule[schedule_name] = entry
                        
                        if is_update:
                            updated_count += 1
                            logger.info(f"üîÑ Updated schedule: {parser.name} ({schedule_name}) - {fixed_schedule}")
                        else:
                            added_count += 1
                            logger.info(f"‚ûï Added schedule: {parser.name} ({schedule_name}) - {fixed_schedule}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Error creating schedule for {parser.name}: {e}")
                        error_count += 1
            
            db.close()
            
            total_schedules = len(self.schedule)
            parser_schedules = len([k for k in self.schedule.keys() if k.startswith('parser_')])
            
            if error_count > 0:
                logger.warning(f"‚ö†Ô∏è Database update complete: {added_count} added, {updated_count} updated, {removed_count} removed, {error_count} errors. Total: {parser_schedules} parsers, {total_schedules} schedules")
            else:
                logger.info(f"‚úÖ Database update complete: {added_count} added, {updated_count} updated, {removed_count} removed. Total: {parser_schedules} parsers, {total_schedules} schedules")
            
        except Exception as e:
            logger.error(f"üí• Error updating from database: {e}")
    
    def tick(self):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º tick –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î
        """
        import time
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –ë–î –∫–∞–∂–¥—ã–µ 90 —Å–µ–∫—É–Ω–¥ (–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        if current_time - self.last_db_update > 90:  # 1.5 –º–∏–Ω—É—Ç—ã = 90 —Å–µ–∫—É–Ω–¥
            logger.info("üîÑ Periodic database update...")
            self.update_from_database()
            self.last_db_update = current_time
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π tick
        return super().tick()
    
    @property
    def schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        return self.data