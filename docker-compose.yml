# Docker Compose configuration for Fantasy Sports Platform.

# Defines all services including backend API, frontend, databases,
# Celery workers, and monitoring tools for local development.

version: '3.8'

services:
  # FastAPI backend application
  backend:
    build: ./backend
    container_name: fantasy_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://fantasy_user:fantasy_pass@db:5432/fantasy_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-this
      - FIRST_SUPERUSER=admin@example.com
      - FIRST_SUPERUSER_PASSWORD=changethis
      - TZ=Europe/Moscow
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery worker for background tasks
  celery_worker:
    build: ./backend
    container_name: fantasy_celery_worker
    environment:
      - DATABASE_URL=postgresql://fantasy_user:fantasy_pass@db:5432/fantasy_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-this
      - FIRST_SUPERUSER=admin@example.com
      - FIRST_SUPERUSER_PASSWORD=changethis
      - TZ=Europe/Moscow
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - ./backend:/app
    # Use solo pool for Windows compatibility, prefork for Linux
    command: celery -A app.worker worker --loglevel=info --pool=solo --max-tasks-per-child=10

  # Celery beat scheduler for periodic tasks
  celery_beat:
    build: ./backend
    container_name: fantasy_celery_beat
    environment:
      - DATABASE_URL=postgresql://fantasy_user:fantasy_pass@db:5432/fantasy_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-this
      - FIRST_SUPERUSER=admin@example.com
      - FIRST_SUPERUSER_PASSWORD=changethis
      - TZ=Europe/Moscow
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
      - redis
      - backend
      - celery_worker
    volumes:
      - ./backend:/app
      - celery_beat_data:/tmp
    command: celery -A app.worker beat --loglevel=info -s /tmp/celerybeat-schedule --pidfile=/tmp/celerybeat.pid

  # Vue.js frontend application
  frontend:
    build: ./frontend
    container_name: fantasy_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://fantasy.local
    command: npm run dev

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: fantasy_db
    environment:
      - POSTGRES_USER=fantasy_user
      - POSTGRES_PASSWORD=fantasy_pass
      - POSTGRES_DB=fantasy_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis for Celery message broker
  redis:
    image: redis:7-alpine
    container_name: fantasy_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Flower for Celery monitoring
  flower:
    build: ./backend
    container_name: fantasy_flower
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://fantasy_user:fantasy_pass@db:5432/fantasy_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-this
      - FIRST_SUPERUSER=admin@example.com
      - FIRST_SUPERUSER_PASSWORD=changethis
      - TZ=Europe/Moscow
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - celery_worker
    volumes:
      - ./backend:/app
    command: celery -A app.worker flower --port=5555

  # Nginx reverse proxy
  nginx:
    build: ./nginx
    container_name: fantasy_nginx
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  postgres_data:      # Persistent database storage
  redis_data:         # Persistent Redis storage
  celery_beat_data:   # Persistent Celery Beat schedule storage
